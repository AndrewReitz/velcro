ext {
  /** Folder where the application we are generating the archetype is coming from */
  APP_FOLDER = "velcro-app"

  /** The resources folder inside the archetype to place the app files */
  LAZYBONES_FOLDER = "velcro-lazybones/src/templates/velcro"

  /** App Name needs to be filtered out of files and replaced with ${applicationName} */
  FILTER_APP_NAME = "Velcro"

  /** What the application name should be replaced with. This value is defined in archetype-metadata.xml */
  APP_NAME_REPLACE = "{{applicationName}}"

  /** Package value that needs to be filtered out and replaced with archetype variable */
  FILTER_PACKAGE = "com.andrewreitz.velcro"

  /** Package variable. */
  PACKAGE_REPLACE = "{{packageName}}"

  /** files to be kept when doing a clean. These are setup specific to the archetype */
  KEEP_FILES = ["README.md", "settings.gradle", 'lazybones.groovy', 'VERSION']

  /** Files with these extensions have values that should be replaced with archetype variable */
  FILTER_EXTENSIONS = [".xml", ".java", ".md"]

  isSnapshot = !project.hasProperty('release')
}

allprojects {
  version = "1.0.0${isSnapshot == true ? "-SNAPSHOT" : ""}"
}


task cleanLazybones(type: Delete) {
  description = "Clean the velcro-lazybones folder."

  doFirst {
    def files = files { file(LAZYBONES_FOLDER).listFiles() }
    files.each { File file ->
      if (!KEEP_FILES.contains(file.name)) {
        logger.debug("Delete $file")
        delete file
      }
    }
  }
}

task copyToLazybones(type: Copy) {
  description = "Copy velcro-app to velcro-lazybones."

  def copySpec = project.copySpec {
    from APP_FOLDER
    into LAZYBONES_FOLDER
    eachFile { file ->

      // Skip trying to copy a file we save
      KEEP_FILES.each { name ->
        if (file.name == name) {
          file.exclude()
          return;
        }
      }


      // Only filter specific files, images and binaries will become corrupt
      for (String ext in FILTER_EXTENSIONS) {
        if (file.name.toLowerCase().endsWith(ext)) {
          filter {
            it.replace(FILTER_APP_NAME, APP_NAME_REPLACE).replace(FILTER_PACKAGE, PACKAGE_REPLACE)
          }
        }
      }
    }
  }

  into '.'
  with copySpec
}

